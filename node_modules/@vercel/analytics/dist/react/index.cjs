'use strict';
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/react.tsx
var react_exports = {};
__export(react_exports, {
  Analytics: () => Analytics,
});
module.exports = __toCommonJS(react_exports);
var import_react = require('react');

// src/queue.ts
var initQueue = () => {
  if (window.va) return;
  window.va = function a(...params) {
    (window.vaq = window.vaq || []).push(params);
  };
};

// src/generic.ts
var isBrowser = typeof window !== 'undefined';
var inject = ({ beforeSend } = {}) => {
  var _a;
  if (!isBrowser) return;
  initQueue();
  if (beforeSend) {
    (_a = window.va) == null
      ? void 0
      : _a.call(window, 'beforeSend', beforeSend);
  }
  if (document.head.querySelector('script[src="/va/script.js"]')) return;
  const script = document.createElement('script');
  script.src = '/va/script.js';
  script.async = true;
  document.head.appendChild(script);
};

// src/react.tsx
var import_jsx_runtime = require('react/jsx-runtime');
function Analytics(props) {
  if (process.env.NODE_ENV !== 'production') {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(NoopAnalytics, {});
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(EnabledAnalytics, {
    ...props,
  });
}
function EnabledAnalytics({ beforeSend }) {
  (0, import_react.useEffect)(() => {
    inject({ beforeSend });
  }, [beforeSend]);
  return null;
}
function NoopAnalytics() {
  (0, import_react.useEffect)(() => {
    console.warn(
      'Vercel Analytics is set up, but detected a non-production environment.\n\nPlease note that no analytics events will be sent.',
    );
  }, []);
  return null;
}
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    Analytics,
  });
//# sourceMappingURL=index.cjs.map
